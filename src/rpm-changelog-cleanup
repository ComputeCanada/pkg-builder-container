#!/bin/bash
 #
 # Formats input text to be used in an RPM changelog:
 # * Make lines a bulleted list: first line is first bullet, subsequent lines
 #   are either continuations, sublists, or the next item
 # * Removes blank lines
 # * Converts '*' to '-'


clean()
{
  sed '
  :start
  /^[[:space:]]*$/ d
  /^\*/ {
    s/^\*[[:space:]]*/  - /
    b
  }
  /^-/! {
    s/^/- /
    n
    /^[[:space:]]*$/ {
      b start
    }
    s/^/  /
    s/\([[:space:]]*\)\*/\1-/
  }
  '
}

usage="
Usage: rpm-changelog-cleanup -t
       rpm-changelog-cleanup [-sN]

Reads text from stdin and expresses to stdout in a format friendly to RPM
changelogs.  If '-sN' is specified, echoes first N lines without filtering.
If N is empty or a non-integer, script will fail, and not gracefully.

If '-t' is used, runs (in-script) tests against filter.
"

cleaning=1
while [ -n "$1" ]
do
  case "$1" in
    -s*)
      N=${1#-s}
      i=0
      while [ "$i" -lt "$N" ]
      do
        read line
        echo "$line"
        i=$((i+1))
      done
      ;;
    -t)
      cleaning=0
      ;;
    *)
      echo "Not recognized: $1" 2>&1
      echo "$usage" 2>&1
      exit 1
      ;;
  esac
  shift
done

if ((cleaning))
then
  clean
  exit
fi

expected()
{
  echo -e "For:\n----\n$1\n-----\nExpected:\n----\n$2\n----\nReceived:\n----\n$3\n----" >&2
  return 1
}

fail()
{
  echo "$@" >&2
  exit 1
}

tests=(
# test 1 source
"Did the thing
* which involved this
* and this"

# test 1 expected
"- Did the thing
  - which involved this
  - and this"

# test 2 source
"Merge branch 'that-thing' into 'main'
* that was the thing

There was this other thing
this is a continuation of that line


See merge request dingbatz/whateverness!6"

# test 2 expected
"- Merge branch 'that-thing' into 'main'
  - that was the thing
- There was this other thing
  this is a continuation of that line
- See merge request dingbatz/whateverness!6"

# test 3 source
"Merge branch 'that-thing' into 'main'

* That was the thing"

# test 3 expected
"- Merge branch 'that-thing' into 'main'
  - That was the thing"
)

let rc=0
for ((i=0; i<${#tests[@]}; i+=2))
do
  res=`echo "${tests[$i]}" | clean`
  expected=${tests[((i+1))]}
  test "$res" == "$expected" || {
    expected "${tests[$i]}" "$expected" "$res"
    let rc=1
  }
done
exit $rc
